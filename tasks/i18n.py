"""
Internationalization tasks

NOTE: if a function has **kwargs, it means it is a pretask
for a task taking certain args/options (i.e. **kwargs are ignored)
"""
from __future__ import print_function

import os
import sys
from distutils.spawn import find_executable

from path import path
from invoke import task
from invoke import run as sh
from pygments.console import colorize
from .utils.cmd import cmd
from .utils.envs import Env
from .tests import test_i18n

I18N_REPORT_DIR = Env.REPORT_ROOT.joinpath('i18n')
I18N_XUNIT_REPORT = I18N_REPORT_DIR.joinpath('nosetests.xml')


@task
def clean_reports_dir():
    """Clean coverage files, to ensure that we don't use stale data to generate reports."""
    I18N_REPORT_DIR.rmtree_p()
    I18N_REPORT_DIR.makedirs_p()


@task('i18n.validate_gettext', 'assets.update')
def extract(verbose=False, **kwargs):
    """
    Extract localizable strings from sources
    Params:
        verbose=False Display verbose output
    """
    executable = Env.REPO_ROOT / 'i18n/extract.py'
    print("Executable", executable)
    if verbose:
        sh(cmd(executable, '-vv'))
    else:
        sh(cmd(executable))


@task('i18n.extract')
def generate(strict=False):
    """
    Compile localizable strings from sources, extracting strings first.
    Params:
        strict=False Complain if files are missing
    """
    executable = Env.REPO_ROOT / 'i18n/generate.py'
    if strict:
        sh(cmd(executable, '--strict'))
    else:
        sh(cmd(executable))


@task('i18n.extract')
def dummy():
    """
    Simulate international translation by generating dummy strings
    corresponding to source strings.
    """
    executable = Env.REPO_ROOT / 'i18n/dummy.py'
    sh(cmd(executable))


@task
def validate_gettext(**kwargs):
    """Make sure GNU gettext utilities are available"""
    if find_executable('xgettext') is None:
        err = (
            "Cannot locate GNU gettext utilities, which are required by Django "
            "for internationalization.\n See "
            "https://docs.djangoproject.com/en/dev/topics/i18n/translation/#message-files\n"
            "Try downloading them from http://www.gnu.org/software/gettext/"
        )
        print(colorize("darkred", err))
        sys.exit(1)

@task
def validate_transifex_config():
    """Make sure config file with username/password exists"""
    pathstr = os.environ['HOME'] + '/.transifexrc'
    config_file = path(pathstr)
    if not (config_file.exists() and config_file.size > 0):
        print(colorize("darkred",
                       "Cannot connect to Transifex, config file is missing or empty: "
                       "{}\n See http://help.transifex.com/features/client/#transifexrc"
                       .format(pathstr)))
        sys.exit(1)

@task('i18n.validate_transifex_config')
def transifex_push():
    """Push source strings to Transifex for translation"""
    transifex_executable = Env.REPO_ROOT / 'i18n/transifex.py'
    sh(cmd(transifex_executable, 'push'))


@task('i18n.validate_transifex_config')
def transifex_pull():
    """Pull translated strings from Transifex"""
    transifex_executable = Env.REPO_ROOT / 'i18n/transifex.py'
    sh(cmd(transifex_executable, 'pull'))


@task("i18n.transifex_pull", "i18n.extract", "i18n.dummy")
def robot_pull():
    """Pull source strings, generato po and mo files, and validate"""
    #XXX: The develop branch of invoke allows for specifying call
    #signatures of pre tasks using the `Call` class
    sh(cmd("inv", "i18n.generate", "--strict"))
    sh(cmd("git", "clean", "-fdX", "conf/locale"))
    sh(cmd("inv", "i18n.test"))
    sh(cmd("git", "add", "conf/locale"))
    sh(cmd("git", "commit", '--message="Update translations (autogenerated message)"','--edit'))

@task("i18n.extract", "i18n.transifex_push")
def robot_push():
    """Extract new strings, and push to transifex"""
    pass

@task
def test():
    # proxy to `test.i18n`
    test_i18n()
